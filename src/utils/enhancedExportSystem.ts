// üìÅ enhancedExportSystem.ts - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import dayjs from 'dayjs';
import 'dayjs/locale/th';

dayjs.locale('th');

// üìå Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
interface ShiftSlot {
  user_id: string;
  role: string;
  assigned_by?: 'auto' | 'manual' | 'request';
}

interface DaySchedule {
  date: string;
  shift: 'morning' | 'afternoon';
  day_type: 'weekday' | 'weekend' | 'holiday';
  slots: ShiftSlot[];
  is_complete: boolean;
  warnings?: string[];
}

interface Personnel {
  id: string;
  name: string;
  role: string;
  position?: string;
  department?: string;
  phone?: string;
  email?: string;
}

interface UserShiftData {
  name: string;
  position: string;
  department?: string;
  shifts: Record<string, string>;
  summary: {
    morning: number;
    afternoon: number;
    total: number;
    weekday: number;
    weekend: number;
    holiday: number;
  };
  payment?: number;
}

// üîß ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function transformToGridData(
  shifts: DaySchedule[], 
  personnelList: Personnel[],
  config?: any
): Record<string, UserShiftData> {
  const users: Record<string, UserShiftData> = {};
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  personnelList.forEach(p => {
    users[p.id] = {
      name: p.name,
      position: p.position || p.role,
      department: p.department,
      shifts: {},
      summary: {
        morning: 0,
        afternoon: 0,
        total: 0,
        weekday: 0,
        weekend: 0,
        holiday: 0
      },
      payment: 0
    };
  });

  // ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  shifts.forEach(shift => {
    shift.slots.forEach(slot => {
      const user = users[slot.user_id];
      if (!user) return;

      const mark = shift.shift === 'morning' ? '‡∏ä' : '‡∏ö';
      user.shifts[shift.date] = mark;
      
      // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      if (shift.shift === 'morning') user.summary.morning++;
      else user.summary.afternoon++;
      
      if (shift.day_type === 'weekday') user.summary.weekday++;
      else if (shift.day_type === 'weekend') user.summary.weekend++;
      else user.summary.holiday++;
      
      user.summary.total++;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ config)
      if (config?.rates) {
        const rate = config.rates[shift.shift][slot.role] || 0;
        user.payment = (user.payment || 0) + rate;
      }
    });
  });

  return users;
}

// ‚ú® Export Excel ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
export function exportToEnhancedExcel(
  shifts: DaySchedule[], 
  personnelList: Personnel[], 
  options: {
    month: number;
    year: number;
    title?: string;
    includeSummary?: boolean;
    includePayment?: boolean;
    includeStatistics?: boolean;
    config?: any;
  }
): void {
  const { month, year, title, includeSummary = true, includePayment = false, includeStatistics = true, config } = options;
  const users = transformToGridData(shifts, personnelList, config);
  
  const wb = XLSX.utils.book_new();
  
  // üìä Sheet 1: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏´‡∏•‡∏±‡∏Å
  const mainSheetData = createMainSheet(users, month, year, title);
  const mainWs = XLSX.utils.aoa_to_sheet(mainSheetData);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  const range = XLSX.utils.decode_range(mainWs['!ref']!);
  mainWs['!cols'] = [
    { width: 20 }, // ‡∏ä‡∏∑‡πà‡∏≠
    { width: 15 }, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    { width: 12 }, // ‡πÅ‡∏ú‡∏ô‡∏Å
    ...Array(31).fill({ width: 4 }), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1-31
    { width: 6 }, // ‡∏ä
    { width: 6 }, // ‡∏ö
    { width: 8 }, // ‡∏£‡∏ß‡∏°
    { width: 10 }, // ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á
    { width: 15 }  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
  ];
  
  XLSX.utils.book_append_sheet(wb, mainWs, '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£');

  // üìà Sheet 2: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ
  if (includeStatistics) {
    const statsData = createStatisticsSheet(shifts, users);
    const statsWs = XLSX.utils.aoa_to_sheet(statsData);
    XLSX.utils.book_append_sheet(wb, statsWs, '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥');
  }

  // üí∞ Sheet 3: ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á
  if (includePayment && config?.rates) {
    const paymentData = createPaymentSheet(users, config);
    const paymentWs = XLSX.utils.aoa_to_sheet(paymentData);
    XLSX.utils.book_append_sheet(wb, paymentWs, '‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á');
  }

  // üóì Sheet 4: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
  const detailData = createDailyDetailSheet(shifts, personnelList);
  const detailWs = XLSX.utils.aoa_to_sheet(detailData);
  XLSX.utils.book_append_sheet(wb, detailWs, '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
  const filename = `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£_${month.toString().padStart(2, '0')}_${year}.xlsx`;
  XLSX.writeFile(wb, filename);
  
  console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${filename}`);
}

// üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏´‡∏•‡∏±‡∏Å
function createMainSheet(users: Record<string, UserShiftData>, month: number, year: number, title?: string): any[][] {
  const data: any[][] = [];
  
  // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
  if (title) {
    data.push([title]);
    data.push([]);
  }
  
  data.push([`‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${dayjs(`${year}-${month}-01`).format('MMMM YYYY')}`]);
  data.push([]);

  // Header ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
  const headerRow1 = ['‡∏ä‡∏∑‡πà‡∏≠ - ‡∏™‡∏Å‡∏∏‡∏•', '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡πÅ‡∏ú‡∏ô‡∏Å'];
  for (let d = 1; d <= 31; d++) {
    headerRow1.push(d.toString());
  }
  headerRow1.push('‡∏™‡∏£‡∏∏‡∏õ', '', '', '‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏');
  data.push(headerRow1);

  // Header ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≠‡∏á
  const headerRow2 = ['', '', ''];
  const daysInMonth = dayjs(`${year}-${month}`).daysInMonth();
  
  for (let d = 1; d <= 31; d++) {
    if (d <= daysInMonth) {
      const dayName = dayjs(`${year}-${month}-${d}`).format('ddd');
      headerRow2.push(dayName);
    } else {
      headerRow2.push('');
    }
  }
  headerRow2.push('‡∏ä', '‡∏ö', '‡∏£‡∏ß‡∏°', '‡∏ö‡∏≤‡∏ó', '');
  data.push(headerRow2);

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  Object.values(users).forEach(user => {
    const row = [user.name, user.position, user.department || ''];
    
    for (let d = 1; d <= 31; d++) {
      const dateStr = `${year}-${month.toString().padStart(2, '0')}-${d.toString().padStart(2, '0')}`;
      row.push(user.shifts[dateStr] || '');
    }
    
    row.push(
      user.summary.morning,
      user.summary.afternoon,
      user.summary.total,
      user.payment || 0,
      ''
    );
    
    data.push(row);
  });

  return data;
}

// üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
function createStatisticsSheet(shifts: DaySchedule[], users: Record<string, UserShiftData>): any[][] {
  const data: any[][] = [];
  
  data.push(['üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']);
  data.push([]);
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
  const totalShifts = shifts.length;
  const completeDays = shifts.filter(s => s.is_complete).length;
  const totalWarnings = shifts.reduce((sum, s) => sum + (s.warnings?.length || 0), 0);
  
  data.push(['‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ']);
  data.push(['‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', totalShifts]);
  data.push(['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏Ñ‡∏£‡∏ö', completeDays]);
  data.push(['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤', totalShifts - completeDays]);
  data.push(['‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', totalWarnings]);
  data.push([]);

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£
  const userStats = Object.values(users).map(u => ({
    name: u.name,
    total: u.summary.total,
    morning: u.summary.morning,
    afternoon: u.summary.afternoon
  })).sort((a, b) => b.total - a.total);

  data.push(['‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£)']);
  data.push(['‡∏ä‡∏∑‡πà‡∏≠', '‡πÄ‡∏ß‡∏£‡∏£‡∏ß‡∏°', '‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤', '‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢']);
  userStats.forEach(stat => {
    data.push([stat.name, stat.total, stat.morning, stat.afternoon]);
  });

  return data;
}

// üí∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á
function createPaymentSheet(users: Record<string, UserShiftData>, config: any): any[][] {
  const data: any[][] = [];
  
  data.push(['üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']);
  data.push([]);
  
  data.push(['‡∏ä‡∏∑‡πà‡∏≠', '‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤', '‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢', '‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏£', '‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á (‡∏ö‡∏≤‡∏ó)']);
  
  let totalPayment = 0;
  Object.values(users).forEach(user => {
    data.push([
      user.name,
      user.summary.morning,
      user.summary.afternoon,
      user.summary.total,
      user.payment || 0
    ]);
    totalPayment += user.payment || 0;
  });
  
  data.push([]);
  data.push(['‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '', '', '', totalPayment]);
  
  return data;
}

// üóì ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
function createDailyDetailSheet(shifts: DaySchedule[], personnelList: Personnel[]): any[][] {
  const data: any[][] = [];
  
  data.push(['üóì ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô']);
  data.push([]);
  data.push(['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô', '‡πÄ‡∏ß‡∏£', '‡∏ä‡∏∑‡πà‡∏≠', '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']);
  
  shifts.forEach(shift => {
    const dayStr = dayjs(shift.date).format('DD/MM/YYYY (dddd)');
    
    if (shift.slots.length === 0) {
      data.push([
        dayStr,
        shift.day_type,
        shift.shift === 'morning' ? '‡πÄ‡∏ä‡πâ‡∏≤' : '‡∏ö‡πà‡∏≤‡∏¢',
        '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏ß‡∏£',
        '',
        '',
        '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå'
      ]);
    } else {
      shift.slots.forEach((slot, index) => {
        const person = personnelList.find(p => p.id === slot.user_id);
        data.push([
          index === 0 ? dayStr : '',
          index === 0 ? shift.day_type : '',
          index === 0 ? (shift.shift === 'morning' ? '‡πÄ‡∏ä‡πâ‡∏≤' : '‡∏ö‡πà‡∏≤‡∏¢') : '',
          person?.name || slot.user_id,
          slot.role,
          slot.assigned_by === 'request' ? 'üôã ‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£' : 'ü§ñ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
          index === 0 ? (shift.is_complete ? '‚úÖ ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå' : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö') : ''
        ]);
      });
    }
  });
  
  return data;
}

// üé® Export PDF ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
export async function exportToEnhancedPDF(
  elementId: string = 'shift-table-container',
  options: {
    filename?: string;
    orientation?: 'portrait' | 'landscape';
    quality?: number;
    addHeader?: boolean;
    addFooter?: boolean;
    title?: string;
  } = {}
): Promise<void> {
  const {
    filename = `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£_${dayjs().format('YYYY-MM-DD')}.pdf`,
    orientation = 'landscape',
    quality = 1.0,
    addHeader = true,
    addFooter = true,
    title = '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
  } = options;

  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö element ‡∏ó‡∏µ‡πà‡∏°‡∏µ id="${elementId}"`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas ‡∏à‡∏≤‡∏Å HTML
    const canvas = await html2canvas(element, {
      scale: quality,
      useCORS: true,
      backgroundColor: '#ffffff'
    });

    const imgData = canvas.toDataURL('image/jpeg', 0.9);
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
    const pdf = new jsPDF({
      orientation: orientation,
      unit: 'px',
      format: [imgWidth + 40, imgHeight + 80] // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header/footer
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° header
    if (addHeader) {
      pdf.setFontSize(16);
      pdf.text(title, 20, 30);
      pdf.setFontSize(10);
      pdf.text(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${dayjs().format('DD/MM/YYYY HH:mm')}`, 20, 50);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const yPosition = addHeader ? 60 : 20;
    pdf.addImage(imgData, 'JPEG', 20, yPosition, imgWidth, imgHeight);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° footer
    if (addFooter) {
      const footerY = yPosition + imgHeight + 20;
      pdf.setFontSize(8);
      pdf.text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 20, footerY);
      pdf.text(`‡∏´‡∏ô‡πâ‡∏≤ 1`, imgWidth - 40, footerY);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    pdf.save(filename);
    console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${filename}`);
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF:', error);
    throw error;
  }
}

// üì± Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
export async function exportToImage(
  elementId: string,
  format: 'png' | 'jpeg' = 'png',
  filename?: string
): Promise<void> {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö element ‡∏ó‡∏µ‡πà‡∏°‡∏µ id="${elementId}"`);
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    backgroundColor: '#ffffff'
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á link ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
  const link = document.createElement('a');
  link.download = filename || `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£_${dayjs().format('YYYY-MM-DD')}.${format}`;
  link.href = canvas.toDataURL(`image/${format}`, format === 'jpeg' ? 0.9 : 1.0);
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${link.download}`);
}

// üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î
export async function exportAllFormats(
  shifts: DaySchedule[],
  personnelList: Personnel[],
  options: {
    month: number;
    year: number;
    title?: string;
    elementId?: string;
    config?: any;
  }
): Promise<void> {
  const { month, year, title, elementId, config } = options;
  
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó...');
    
    // Excel
    exportToEnhancedExcel(shifts, personnelList, {
      month,
      year,
      title,
      includePayment: !!config,
      config
    });
    
    // PDF (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ element)
    if (elementId && document.getElementById(elementId)) {
      await exportToEnhancedPDF(elementId, {
        filename: `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£_${month.toString().padStart(2, '0')}_${year}.pdf`,
        title: title || `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ ${month}/${year}`
      });
    }
    
    console.log('‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å:', error);
    throw error;
  }
}

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
export {
  transformToGridData
}; 