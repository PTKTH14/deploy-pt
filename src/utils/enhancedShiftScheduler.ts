// @ts-nocheck - Temporarily disable type checking for this file
// üìÅ enhancedShiftScheduler.ts - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á v2.0
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import { format } from 'date-fns';
// @ts-ignore - Using existing supabase client
import { supabase } from '@/integrations/supabase/client';

dayjs.extend(utc);
dayjs.extend(timezone);

// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á (Simulation Mode)
export const USE_SIMULATION_MODE = false; // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á

// üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
const MOCK_CONFIG: ShiftConfig = {
  weekday_shift: 'afternoon',
  weekend_shift: 'morning',
  holiday_shift: 'morning',
  formats: {
    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
    weekday: [{ PT: 2, PT_ASST: 1 }], // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô PT 2 ‡∏Ñ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ 1 ‡∏Ñ‡∏ô (‡∏£‡∏ß‡∏° 3 ‡∏Ñ‡∏ô)
    // ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡πÄ‡∏™‡∏≤‡∏£‡πå)
    weekend: [{ PT: 1, PT_ASST: 1 }],
    // ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå
    holiday: [{ PT: 1, PT_ASST: 1 }],
  },
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
  alternative_formats: {
    weekday_alt1: [{ PT: 2, PT_ASST: 2 }],
    weekday_alt2: [{ PT: 1, PT_ASST: 2 }],
    weekend_alt1: [{ PT: 1, PT_ASST: 0 }],
  },
  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  active_format: 'default', // 'default', 'alt1', 'alt2'
  max_consecutive_days: 2,  // ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ß‡∏±‡∏ô
  min_rest_days: 1,         // ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏à‡∏≤‡∏Å 2 ‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏ñ‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô
  fair_distribution_weight: 1.2,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢
  pt_asst_max_consecutive_days: 3,  // ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ PT
  pt_asst_min_rest_days: 0,         // ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏£
};

const MOCK_HOLIDAYS = [
  '2025-01-01', // ‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà
  '2025-02-12', // ‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤
  '2025-04-06', // ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ
  '2025-04-13', // ‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå
  '2025-04-14', // ‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå
  '2025-04-15', // ‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå
  '2025-05-01', // ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥
  '2025-05-05', // ‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•
  '2025-06-03', // ‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ø ‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ
  '2025-06-10', // ‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤
  '2025-07-28', // ‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤
  '2025-08-12', // ‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥
  '2025-10-13', // ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï
  '2025-10-23', // ‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä
  '2025-12-05', // ‡∏ß‡∏±‡∏ô‡∏û‡πà‡∏≠‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥
  '2025-12-10', // ‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç
  '2025-12-31', // ‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ
];

const MOCK_PERSONNEL: Personnel[] = [
  { id: '1', name: '‡∏ô.‡∏™.‡∏ä‡∏ô‡∏±‡∏ê‡∏õ‡∏†‡∏≤ ‡∏ß‡∏µ‡∏£‡∏∞‡πÅ‡∏™‡∏á', role: 'PT', position: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç‡∏Å‡∏≤‡∏£', active: true, shift_preference: 'morning' },
  { id: '2', name: '‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà ‡∏£.‡∏ï.‡∏´‡∏ç‡∏¥‡∏á‡∏†‡∏±‡∏ó‡∏£‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡∏≠‡∏¥‡πà‡∏ô‡∏Ñ‡∏≥', role: 'PT', position: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç‡∏Å‡∏≤‡∏£', active: true, shift_preference: 'any' },
  { id: '3', name: '‡∏ô‡∏≤‡∏¢‡πÄ‡∏à‡∏©‡∏é‡∏≤‡∏û‡∏á‡∏©‡πå ‡∏õ‡∏±‡∏ç‡∏ç‡∏≤', role: 'PT', position: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'afternoon' },
  { id: '4', name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏∏‡∏†‡∏≤‡∏£‡∏±‡∏ï‡∏ô‡πå ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏£‡∏≤‡∏ä', role: 'PT', position: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'any' },
  { id: '5', name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ê‡∏¥‡∏ï‡∏≤‡∏†‡∏£‡∏ì‡πå ‡∏´‡∏á‡∏™‡πå‡∏ó‡∏≠‡∏á', role: 'PT', position: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'morning' },
  { id: '6', name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏µ‡∏£‡∏∞‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏Å‡∏±‡∏ô‡∏ó‡∏∞', role: 'PT_ASST', position: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'any' },
  { id: '7', name: '‡∏ô‡∏≤‡∏¢‡∏ì‡∏£‡∏á‡∏Ñ‡πå‡∏§‡∏ó‡∏ò‡∏¥‡πå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡∏ß', role: 'PT_ASST', position: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'afternoon' },
  { id: '8', name: '‡∏ô‡∏≤‡∏¢‡∏ô‡∏§‡∏î‡∏• ‡∏¢‡∏≤‡∏ï‡∏¥', role: 'PT_ASST', position: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'morning' },
  { id: '9', name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏Å‡∏µ‡∏£‡∏ï‡∏¥‡∏Å‡∏≤ ‡∏ò‡∏¥‡∏ó‡∏∞', role: 'PT_ASST', position: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', active: true, shift_preference: 'any' },
];

const MOCK_SHIFT_REQUESTS: ShiftRequest[] = [
  { id: '1', user_id: '1', date: '2025-06-05', request_type: 'want', reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', created_at: '2025-05-20' },
  { id: '2', user_id: '2', date: '2025-06-10', request_type: 'decline', reason: '‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', created_at: '2025-05-21' },
  { id: '3', user_id: '3', date: '2025-06-15', request_type: 'want', reason: '‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', created_at: '2025-05-22' },
  { id: '4', user_id: '4', date: '2025-06-20', request_type: 'decline', reason: '‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å', created_at: '2025-05-23' },
];

// üìå Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Type Safety
export interface ShiftConfig {
  weekday_shift: 'morning' | 'afternoon';
  weekend_shift: 'morning' | 'afternoon';  
  holiday_shift: 'morning' | 'afternoon';
  formats: {
    weekday: Array<Record<string, number>>;
    weekend: Array<Record<string, number>>;
    holiday: Array<Record<string, number>>;
  };
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  alternative_formats?: {
    [key: string]: Array<Record<string, number>>;
  };
  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  active_format?: 'default' | 'alt1' | 'alt2' | string;
  max_consecutive_days?: number;
  min_rest_days?: number;
  fair_distribution_weight?: number;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢
  pt_asst_max_consecutive_days?: number;
  pt_asst_min_rest_days?: number;
}

export interface Personnel {
  id: string;
  name: string;
  role: string;
  position: string;
  active: boolean;
  shift_preference?: 'morning' | 'afternoon' | 'any';
  max_shifts_per_month?: number;
  seniority_level?: number;
  department?: string;
}

export interface ShiftRequest {
  id: string;
  user_id: string;
  date: string;
  request_type: 'want' | 'decline' | 'emergency_only' | 'leave';
  reason?: string;
  created_at: string;
}

export interface ShiftSlot {
  user_id: string;
  role: string;
  assigned_by: 'auto' | 'manual' | 'request';
  confidence_score?: number;
}

export interface DaySchedule {
  date: string;
  shift: 'morning' | 'afternoon';
  day_type: 'weekday' | 'weekend' | 'holiday' | 'sunday';
  slots: ShiftSlot[];
  is_complete: boolean;
  total_required: number;
  warnings?: string[];
  _allSlots?: ShiftSlot[];
}

// üìå ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ä config
let cachedConfig: ShiftConfig | null = null;
async function getShiftConfig(userConfig?: Partial<ShiftConfig>): Promise<ShiftConfig> {
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ userConfig ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  if (userConfig) {
    console.log('üîß ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', userConfig);
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ú‡∏™‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å MOCK_CONFIG ‡∏Å‡∏±‡∏ö userConfig
    if (USE_SIMULATION_MODE) {
      const mergedConfig = { ...MOCK_CONFIG };
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å userConfig
      if (userConfig.formats) {
        mergedConfig.formats = {
          ...mergedConfig.formats,
          ...userConfig.formats
        };
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      if (userConfig.weekday_shift) mergedConfig.weekday_shift = userConfig.weekday_shift;
      if (userConfig.weekend_shift) mergedConfig.weekend_shift = userConfig.weekend_shift;
      if (userConfig.holiday_shift) mergedConfig.holiday_shift = userConfig.holiday_shift;
      
      console.log('üé≠ ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏ú‡∏™‡∏°');
      return mergedConfig;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô DB
    try {
      // @ts-ignore - Tables not properly typed in supabase client
      await supabase
        .from('shift_config')
        .update({ value: userConfig })
        .eq('key', 'default');
      
      cachedConfig = null; // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£:', error);
    }
  }

  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
  if (USE_SIMULATION_MODE) {
    console.log('üé≠ ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á');
    return MOCK_CONFIG;
  }

  if (cachedConfig) {
    console.log('üíæ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä');
    return cachedConfig;
  }
  
  try {
    console.log('üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å Supabase...');
    // @ts-ignore - Tables not properly typed in supabase client
    const { data, error } = await supabase
      .from('shift_config')
      .select('value')
      .eq('key', 'default')
      .single();
      
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å Supabase:', error);
      throw error;
    }
    
    console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    cachedConfig = data.value;
    return cachedConfig;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£:', error);
    console.warn('‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô');
    return MOCK_CONFIG;
  }
}

// üìå ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
async function getHolidays(year?: number): Promise<string[]> {
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
  if (USE_SIMULATION_MODE) {
    console.log('üé≠ ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á');
    if (year) {
      const yearStr = year.toString();
      const filteredHolidays = MOCK_HOLIDAYS.filter(date => date.startsWith(yearStr));
      console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ ${year}:`, filteredHolidays.length, '‡∏ß‡∏±‡∏ô');
      return filteredHolidays;
    }
    console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', MOCK_HOLIDAYS.length, '‡∏ß‡∏±‡∏ô');
    return MOCK_HOLIDAYS;
  }

  try {
    console.log('üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å Supabase...');
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays ‡∏Å‡πà‡∏≠‡∏ô
    let holidayDates: string[] = [];
    
    // @ts-ignore - Tables not properly typed in supabase client
    let query = supabase.from('holidays').select('*');
    
    if (year) {
      const startYear = `${year}-01-01`;
      const endYear = `${year}-12-31`;
      try {
        query = query.gte('date', startYear).lte('date', endYear);
      } catch (e) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays:', e);
      }
    }
    
    const { data: holidaysData, error: holidaysError } = await query;
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á public_holidays ‡πÅ‡∏ó‡∏ô
    if (holidaysError || !holidaysData || holidaysData.length === 0) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á public_holidays ‡πÅ‡∏ó‡∏ô');
      
      // @ts-ignore - Tables not properly typed in supabase client
      let publicQuery = supabase.from('public_holidays').select('*');
      
      if (year) {
        const startYear = `${year}-01-01`;
        const endYear = `${year}-12-31`;
        try {
          publicQuery = publicQuery.gte('date', startYear).lte('date', endYear);
        } catch (e) {
          console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á public_holidays:', e);
        }
      }
      
      const { data: publicData, error: publicError } = await publicQuery;
      
      if (publicError || !publicData || publicData.length === 0) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô');
        return MOCK_HOLIDAYS;
      }
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á public_holidays
      const extractedDates = extractDatesFromData(publicData);
      console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á public_holidays ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', extractedDates.length, '‡∏ß‡∏±‡∏ô');
      return extractedDates;
    }
    
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays
    const extractedDates = extractDatesFromData(holidaysData);
    console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', extractedDates.length, '‡∏ß‡∏±‡∏ô');
    return extractedDates;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î:', error);
    console.warn('‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô');
    return MOCK_HOLIDAYS;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏Å‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function extractDatesFromData(data: any[]): string[] {
  if (!data || data.length === 0) return [];
  
  const firstRow = data[0];
  let dateField = 'date';
  
  if (typeof firstRow.date === 'string') {
    dateField = 'date';
  } else if (typeof firstRow.holiday_date === 'string') {
    dateField = 'holiday_date';
  } else {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date ‡∏´‡∏£‡∏∑‡∏≠ holiday_date ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const possibleDateField = Object.keys(firstRow).find(key => 
      typeof firstRow[key] === 'string' && 
      firstRow[key].match(/^\d{4}-\d{2}-\d{2}/)
    );
    
    if (possibleDateField) {
      dateField = possibleDateField;
    } else {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      return [];
    }
  }
  
  return data.map((d: any) => d[dateField]);
}

// üìå ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô
function getDayType(date: string, holidays: string[]): 'weekday' | 'weekend' | 'holiday' | 'sunday' {
  const d = dayjs(date);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå‡∏Å‡πà‡∏≠‡∏ô
  if (holidays.includes(date)) return 'holiday';
  
  // ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£
  if (d.day() === 0) return 'sunday';
  
  // ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå
  if (d.day() === 6) return 'weekend';
  
  return 'weekday';
}

// üìå ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
async function getPersonnel(): Promise<Personnel[]> {
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
  if (USE_SIMULATION_MODE) {
    console.log('üé≠ ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á');
    return MOCK_PERSONNEL;
  }

  try {
    console.log('üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏à‡∏≤‡∏Å Supabase...');
    // @ts-ignore - Tables not properly typed in supabase client
    const { data, error } = await supabase
      .from('personnel')
      .select('*')
      .eq('active', true);
      
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏à‡∏≤‡∏Å Supabase:', error);
      throw error;
    }

    console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏à‡∏≤‡∏Å Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Personnel interface
    const convertedData = data.map((person: any) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠
      const name = person.name || person.full_name || `${person.first_name || ''} ${person.last_name || ''}`.trim();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      const position = person.position || person.title || '';
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      let role = person.role || '';
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      if (!role || role === '') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà
        if (position.toLowerCase().includes('‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢') || 
            position.toLowerCase().includes('assistant') || 
            position.toLowerCase().includes('asst')) {
          role = 'PT_ASST';
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢" ‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ô‡∏ô‡∏¥‡∏©‡∏ê‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô PT
          role = 'PT';
        }
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
      if (role.toUpperCase() === 'PT_ASST' || 
          role.toUpperCase() === 'PTASST' || 
          role.toUpperCase() === 'PT-ASST' || 
          role.toUpperCase() === 'ASSISTANT') {
        role = 'PT_ASST';
      } else if (role.toUpperCase() === 'PT' || 
                role.toUpperCase() === 'THERAPIST' || 
                role.toUpperCase() === 'PHYSICAL_THERAPIST') {
        role = 'PT';
      }
      
      console.log(`üë§ ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£: ${name}, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${position}, ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${role}`);

      return {
      id: person.id.toString(),
        name: name,
        role: role,
        position: position,
      active: person.active !== false,
      shift_preference: person.shift_preference || 'any'
      };
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á PT ‡πÅ‡∏•‡∏∞ PT_ASST ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasPT = convertedData.some(person => person.role === 'PT');
    const hasPTAsst = convertedData.some(person => person.role === 'PT_ASST');
    
    console.log(`üë®‚Äç‚öïÔ∏è ‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î: ${convertedData.filter(p => p.role === 'PT').length} ‡∏Ñ‡∏ô, üë®‚Äç‚öïÔ∏è ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: ${convertedData.filter(p => p.role === 'PT_ASST').length} ‡∏Ñ‡∏ô`);

    if (!hasPT || !hasPTAsst) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó PT ‡πÅ‡∏•‡∏∞ PT_ASST ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      if (!hasPT && convertedData.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ PT ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô PT
        convertedData[0].role = 'PT';
        console.log(`üîÑ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ ${convertedData[0].name} ‡πÄ‡∏õ‡πá‡∏ô PT`);
      }
      if (!hasPTAsst && convertedData.length > 1) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ PT_ASST ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô PT_ASST
        convertedData[1].role = 'PT_ASST';
        console.log(`üîÑ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ ${convertedData[1].name} ‡πÄ‡∏õ‡πá‡∏ô PT_ASST`);
      }
    }

    return convertedData;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£:', error);
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
    console.warn('‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô');
    return MOCK_PERSONNEL;
  }
}

// üìå ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
async function getShiftRequests(start: string, end: string): Promise<ShiftRequest[]> {
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
  if (USE_SIMULATION_MODE) {
    return MOCK_SHIFT_REQUESTS.filter(req => 
      req.date >= start && req.date <= end
    );
  }

  try {
    // @ts-ignore - Tables not properly typed in supabase client
    const { data, error } = await supabase
      .from('shift_requests')
      .select('*')
      .gte('date', start)
      .lte('date', end);
      
    if (error) throw error;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ShiftRequest interface
    return data.map((request: any) => ({
      id: request.id.toString(),
      user_id: request.user_id.toString(),
      date: request.date,
      request_type: request.request_type || request.type || 'want',
      reason: request.reason || request.comment || '',
      created_at: request.created_at || new Date().toISOString()
    }));
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£:', error);
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
    return [];
  }
}

// üìå ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
async function getRecentShiftHistory(personnelIds: string[], days: number = 30): Promise<Record<string, any[]>> {
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤)
  if (USE_SIMULATION_MODE) {
    const history: Record<string, any[]> = {};
    personnelIds.forEach(id => {
      history[id] = [];
    });
    return history;
  }

  const since = dayjs().subtract(days, 'days').format('YYYY-MM-DD');
  
  const { data, error } = await supabase
    .from('shift_slots')
    .select(`
      user_id,
      shift_schedules!inner (
        date,
        shift
      )
    `)
    .in('user_id', personnelIds)
    .gte('shift_schedules.date', since)
    
  if (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏£:', error);
    throw error;
  }
  
  const history: Record<string, any[]> = {};
  for (const record of data) {
    if (!history[record.user_id]) {
        history[record.user_id] = [];
    }
    if (record.shift_schedules) {
      history[record.user_id].push({
        schedule_date: record.shift_schedules.date,
        shift: record.shift_schedules.shift
      });
    }
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  for (const userId in history) {
    history[userId].sort((a, b) => dayjs(b.schedule_date).diff(dayjs(a.schedule_date)));
  }
  
  return history;
}

// üìå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£
function calculateAssignmentScore(
  person: Personnel, 
  date: string, 
  dayType: 'weekday' | 'weekend' | 'holiday',
  shiftHistory: any[],
  requests: ShiftRequest[],
  currentCounts: Record<string, number>,
  schedule: DaySchedule[], // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
  prevDays: number = 2,  // ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö min_rest_days
  maxConsecutiveDays: number = 2, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  randomnessFactor: number = 0, // ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°, 10 = ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤‡∏Å)
  config: ShiftConfig = MOCK_CONFIG // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ config
): number {
  let score = 100; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢ (‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà) ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  if (shiftHistory.length === 0) {
    score -= 5; // ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏£‡∏Å (‡∏•‡∏î‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏õ‡πá‡∏ô 5)
  }
  
  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢
  if (person.role === 'PT_ASST') {
    maxConsecutiveDays = config.pt_asst_max_consecutive_days || maxConsecutiveDays;
    prevDays = Math.max(1, prevDays); // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    
    // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
    score += 20; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (‡∏•‡∏î‡∏à‡∏≤‡∏Å 30 ‡πÄ‡∏õ‡πá‡∏ô 20)
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢
    const assistantIds = MOCK_PERSONNEL.filter(p => p.role === 'PT_ASST').map(p => p.id);
    const assistantCounts = Object.fromEntries(
      Object.entries(currentCounts).filter(([id, _]) => assistantIds.includes(id))
    );
    
    if (Object.keys(assistantCounts).length > 0) {
      const avgAssistantShifts = Object.values(assistantCounts).reduce((a, b) => a + b, 0) / Object.keys(assistantCounts).length;
      
      if ((currentCounts[person.id] || 0) < avgAssistantShifts) {
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        score += 50; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 40 ‡πÄ‡∏õ‡πá‡∏ô 50
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const todaySchedule = schedule.find(s => s.date === date);
    if (todaySchedule) {
      const assistantsAssigned = todaySchedule.slots.filter(s => s.role === 'PT_ASST').length;
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢
      if (assistantsAssigned === 0) {
        score += 100; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
      }
    }
  } else {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PT ‡∏õ‡∏Å‡∏ï‡∏¥
    const ptIds = MOCK_PERSONNEL.filter(p => p.role === 'PT').map(p => p.id);
    const ptCounts = Object.fromEntries(
      Object.entries(currentCounts).filter(([id, _]) => ptIds.includes(id))
    );
    
    if (Object.keys(ptCounts).length > 0) {
      const avgPTShifts = Object.values(ptCounts).reduce((a, b) => a + b, 0) / Object.keys(ptCounts).length;
      
      if ((currentCounts[person.id] || 0) < avgPTShifts) {
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        score += 50; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 40 ‡πÄ‡∏õ‡πá‡∏ô 50
      }
    }
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏ï‡πà‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ú‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
  if (randomnessFactor > 0) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -randomnessFactor/2 ‡∏ñ‡∏∂‡∏á +randomnessFactor/2 (‡∏•‡∏î‡∏•‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á)
    const randomAdjustment = (Math.random() * 2 - 1) * (randomnessFactor / 2);
    score += randomAdjustment;
  }
  
  // üìä ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏Å‡∏±‡∏ô (‡∏¢‡∏¥‡πà‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≠‡∏¢ ‡∏¢‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á)
  const totalAssigned = currentCounts[person.id] || 0;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (PT ‡∏´‡∏£‡∏∑‡∏≠ PT_ASST)
  let avgAssigned = 0;
  let maxInRole = 0;
  let minInRole = Number.MAX_SAFE_INTEGER;
  let allCountsInRole: number[] = [];
  
  if (person.role === 'PT') {
    const ptCounts = Object.entries(currentCounts)
      .filter(([id, _]) => MOCK_PERSONNEL.find(p => p.id === id)?.role === 'PT')
      .map(([_, count]) => count);
    
    avgAssigned = ptCounts.length > 0 ? ptCounts.reduce((a, b) => a + b, 0) / ptCounts.length : 0;
    maxInRole = ptCounts.length > 0 ? Math.max(...ptCounts) : 0;
    minInRole = ptCounts.length > 0 ? Math.min(...ptCounts) : 0;
    allCountsInRole = ptCounts;
  } else {
    const assistantCounts = Object.entries(currentCounts)
      .filter(([id, _]) => MOCK_PERSONNEL.find(p => p.id === id)?.role === 'PT_ASST')
      .map(([_, count]) => count);
    
    avgAssigned = assistantCounts.length > 0 ? assistantCounts.reduce((a, b) => a + b, 0) / assistantCounts.length : 0;
    maxInRole = assistantCounts.length > 0 ? Math.max(...assistantCounts) : 0;
    minInRole = assistantCounts.length > 0 ? Math.min(...assistantCounts) : 0;
    allCountsInRole = assistantCounts;
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  const distributionWeight = 80; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 40 ‡πÄ‡∏õ‡πá‡∏ô 80)
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
  const difference = avgAssigned - totalAssigned;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  const maxDifference = maxInRole - minInRole;
  
  // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
  if (difference > 0) {
    // ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å ‡∏¢‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å
    const distributionBonus = difference * distributionWeight;
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    const cappedBonus = Math.min(distributionBonus, 120); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 80 ‡πÄ‡∏õ‡πá‡∏ô 120
    score += cappedBonus;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    if (maxDifference >= 2 && totalAssigned === minInRole) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î
      score += 200; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
    }
  } else if (difference < 0) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const penalty = Math.abs(difference) * distributionWeight * 2.0; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏•‡∏á‡πÇ‡∏ó‡∏©‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1.5 ‡πÄ‡∏õ‡πá‡∏ô 2.0)
    score -= Math.min(penalty, 150); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 150 (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 100)
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    if (maxDifference >= 2 && totalAssigned === maxInRole) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
      score -= 300; // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    }
  }
  
  // ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤ (‡∏ä) ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏Å‡∏±‡∏ô
  if (dayType === 'weekend' || dayType === 'holiday') {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    const morningShifts = shiftHistory.filter(s => s.shift === 'morning').length;
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏á
    const avgMorningShifts = 1; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
    if (morningShifts > avgMorningShifts) {
      score -= (morningShifts - avgMorningShifts) * 30; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 25 ‡πÄ‡∏õ‡πá‡∏ô 30
    }
  }
  
  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
  const checkConsecutiveDays = () => {
    let consecutiveDays = 0;
    const today = dayjs(date);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ß‡∏±‡∏ô) ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏ß‡∏£
    for (let i = 1; i < 10; i++) {
      const prevDate = today.subtract(i, 'day');
      const prevDateStr = prevDate.format('YYYY-MM-DD');
      
      let wasOnShift = false;

      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á (schedule)
      const prevSchedule = schedule.find(s => s.date === prevDateStr);
      if (prevSchedule && prevSchedule.slots.some(slot => slot.user_id === person.id)) {
        wasOnShift = true;
      }

      // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (shiftHistory)
      if (!wasOnShift) {
        if (shiftHistory.some(h => h.schedule_date === prevDateStr)) {
          wasOnShift = true;
        }
      }

      if (wasOnShift) {
        consecutiveDays++;
      } else {
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏á
        break;
      }
    }
    
    return consecutiveDays;
  };
  
  const consecutiveDays = checkConsecutiveDays();
  
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô maxConsecutiveDays ‡∏ß‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å
  if (consecutiveDays >= maxConsecutiveDays) {
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
    const penaltyFactor = person.role === 'PT_ASST' ? 25 : 50;
    score -= (consecutiveDays - maxConsecutiveDays + 1) * penaltyFactor;
  }
  
  // üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const wantRequest = requests.find(r => 
    (r.user_id === person.id || r.userId === person.id) && 
    r.date === date && 
    (r.request_type === 'want' || r.type === 'preferred')
  );
  if (wantRequest) {
    score += 40; // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£
  }
  
  // ‚ùå ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const declineRequest = requests.find(r => 
    (r.user_id === person.id || r.userId === person.id) && 
    r.date === date && 
    (r.request_type === 'decline' || r.type === 'avoided')
  );
  if (declineRequest) {
    score -= 75; // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏ß‡∏£
  }
  
  // üåÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ß‡∏£
  const currentShift = dayType === 'weekday' ? 'afternoon' : 'morning'; // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  if (person.shift_preference && person.shift_preference !== 'any') {
    score += person.shift_preference === currentShift ? 20 : -10;
  }
  
  return Math.max(0, score);
}

// üìå ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
export async function generateEnhancedShifts(
  start: string, 
  end: string,
  options: {
    forceBalance?: boolean;
    prioritizeRequests?: boolean;
    allowOverride?: boolean;
    shiftRequests?: ShiftRequest[];
    randomnessFactor?: number;
    userConfig?: Partial<ShiftConfig>;
    personnel?: Personnel[];
  } = {}
): Promise<DaySchedule[]> {
  
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...', { start, end, options });
  
  try {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    const personnelList = options.personnel || await getPersonnel();
    const [config, holidays] = await Promise.all([
      getShiftConfig(options.userConfig),
      getHolidays(dayjs(start).year()),
    ]);
    
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å DB
    const requests = options.shiftRequests || await getShiftRequests(start, end);
    
    // ‡πÅ‡∏¢‡∏Å‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    const ptPersonnel = personnelList.filter(p => p.role === 'PT');
    const ptAssistantPersonnel = personnelList.filter(p => p.role === 'PT_ASST');
    
    console.log(`üë®‚Äç‚öïÔ∏è ‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î: ${ptPersonnel.length} ‡∏Ñ‡∏ô, üë®‚Äç‚öïÔ∏è ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: ${ptAssistantPersonnel.length} ‡∏Ñ‡∏ô`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (ptPersonnel.length === 0) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î (PT) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô');
    }
    
    if (ptAssistantPersonnel.length === 0) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ (PT_ASST) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    const result: DaySchedule[] = [];
    let current = dayjs(start);
    const endDate = dayjs(end);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    console.log('‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î (PT):');
    ptPersonnel.forEach(p => console.log(`- ${p.name} (${p.position})`));
    console.log('‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î (PT_ASST):');
    ptAssistantPersonnel.forEach(p => console.log(`- ${p.name} (${p.position})`));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    const shiftCounts: Record<string, number> = {};
    personnelList.forEach(p => {
      shiftCounts[p.id] = 0;
    });
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏ß‡∏£
    const shiftHistory = await getRecentShiftHistory(
      personnelList.map(p => p.id),
      30 // ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 30 ‡∏ß‡∏±‡∏ô
    );
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    const previousMonthCounts: Record<string, number> = {};
    
    // ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    const previousMonthStart = dayjs(start).subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
    // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    const previousMonthEnd = dayjs(start).subtract(1, 'day').format('YYYY-MM-DD');
    
    console.log(`üìÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏£‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô: ${previousMonthStart} ‡∏ñ‡∏∂‡∏á ${previousMonthEnd}`);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    personnelList.forEach(person => {
      const history = shiftHistory[person.id] || [];
      const shiftsInPreviousMonth = history.filter(shift => 
        shift.schedule_date >= previousMonthStart && 
        shift.schedule_date <= previousMonthEnd
      ).length;
      
      previousMonthCounts[person.id] = shiftsInPreviousMonth;
    });
    
    // ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö PT ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å)
    const rankedPT = [...ptPersonnel].sort((a, b) => 
      (previousMonthCounts[a.id] || 0) - (previousMonthCounts[b.id] || 0)
    );
    
    // ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö PT_ASST ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å)
    const rankedPTAsst = [...ptAssistantPersonnel].sort((a, b) => 
      (previousMonthCounts[a.id] || 0) - (previousMonthCounts[b.id] || 0)
    );
    
    console.log('üìä ‡∏•‡∏≥‡∏î‡∏±‡∏ö PT ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å):');
    rankedPT.forEach(p => console.log(`- ${p.name}: ${previousMonthCounts[p.id] || 0} ‡πÄ‡∏ß‡∏£`));
    
    console.log('üìä ‡∏•‡∏≥‡∏î‡∏±‡∏ö PT_ASST ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å):');
    rankedPTAsst.forEach(p => console.log(`- ${p.name}: ${previousMonthCounts[p.id] || 0} ‡πÄ‡∏ß‡∏£`));
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
    let totalDays = 0;
    let tempCurrent = dayjs(start);
    while (tempCurrent.isBefore(endDate) || tempCurrent.isSame(endDate)) {
      const dateStr = tempCurrent.format('YYYY-MM-DD');
      const dayType = getDayType(dateStr, holidays);
      if (dayType !== 'sunday') {
        totalDays++;
      }
      tempCurrent = tempCurrent.add(1, 'day');
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    const avgPTShiftsPerPerson = Math.ceil(totalDays * config.formats.weekday[0].PT / ptPersonnel.length);
    const avgPTAsstShiftsPerPerson = Math.ceil(totalDays * config.formats.weekday[0].PT_ASST / ptAssistantPersonnel.length);
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalDays} ‡∏ß‡∏±‡∏ô`);
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠ PT: ${avgPTShiftsPerPerson} ‡πÄ‡∏ß‡∏£`);
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠ PT_ASST: ${avgPTAsstShiftsPerPerson} ‡πÄ‡∏ß‡∏£`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô PT ‡πÅ‡∏•‡∏∞ PT_ASST
    let ptQueue = [...rankedPT];
    let ptAsstQueue = [...rankedPTAsst];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025)
    const isInitialMonth = dayjs(start).format('YYYY-MM') === '2025-07';
    // --- ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤ (‡∏ä) ---
    // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î (weekend/holiday) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    let morningDays: {date: string, type: 'weekend'|'holiday'}[] = [];
    let tempDay = dayjs(start);
    while (tempDay.isBefore(endDate) || tempDay.isSame(endDate)) {
      const dateStr = tempDay.format('YYYY-MM-DD');
      const dayType = getDayType(dateStr, holidays);
      if (dayType === 'weekend' || dayType === 'holiday') {
        morningDays.push({date: dateStr, type: dayType});
      }
      tempDay = tempDay.add(1, 'day');
    }
    // 2. ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
    const prevMorningCounts: Record<string, number> = {};
    if (!isInitialMonth) {
      personnelList.forEach(person => {
        const history = shiftHistory[person.id] || [];
        const morningShifts = history.filter(shift =>
          shift.schedule_date >= previousMonthStart &&
          shift.schedule_date <= previousMonthEnd &&
          shift.shift === 'morning'
        ).length;
        prevMorningCounts[person.id] = morningShifts;
      });
    } else {
      personnelList.forEach(person => { prevMorningCounts[person.id] = 0; });
    }
    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤ (PT, PT_ASST) ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let morningPTQueue = isInitialMonth ? [...ptPersonnel] : [...ptPersonnel].sort((a, b) => (prevMorningCounts[a.id]||0)-(prevMorningCounts[b.id]||0));
    let morningPTAsstQueue = isInitialMonth ? [...ptAssistantPersonnel] : [...ptAssistantPersonnel].sort((a, b) => (prevMorningCounts[a.id]||0)-(prevMorningCounts[b.id]||0));
    // 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    const thisMonthMorningCounts: Record<string, number> = {};
    personnelList.forEach(p=>{thisMonthMorningCounts[p.id]=0;});
    // 5. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î/‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå
    // --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å PT_ASST ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ---
    const asstGotMorning: Record<string, boolean> = {};
    ptAssistantPersonnel.forEach(p => { asstGotMorning[p.id] = false; });
    let asstQueueIdx = 0;
    for(const {date, type} of morningDays) {
      // PT
      let pt = morningPTQueue.shift();
      while(pt && !pt.active) pt = morningPTQueue.shift();
      if(pt) {
        thisMonthMorningCounts[pt.id]++;
        morningPTQueue.push(pt);
      }
      // PT_ASST
      let asst = morningPTAsstQueue.shift();
      while(asst && !asst.active) asst = morningPTAsstQueue.shift();
      if(asst) {
        thisMonthMorningCounts[asst.id]++;
        morningPTAsstQueue.push(asst);
        asstGotMorning[asst.id] = true;
      }
    }
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ PT_ASST ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const asstNoMorning = Object.entries(asstGotMorning).filter(([id, got]) => !got).map(([id])=>id);
    if (asstNoMorning.length > 0 && morningDays.length > 0) {
      let idx = 0;
      for(const id of asstNoMorning) {
        // ‡∏´‡∏≤‡πÄ‡∏ä‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ PT_ASST ‡∏ã‡πâ‡∏≥
        for(const {date} of morningDays) {
          if (Object.values(morningPTAsstMap).includes(id)) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
          morningPTAsstMap[date] = id;
          thisMonthMorningCounts[id]++;
          idx++;
          if(idx >= asstNoMorning.length) break;
        }
      }
    }
    // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lookup ‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£ (PT, PT_ASST)
    const morningPTMap: Record<string, string> = {};
    const morningPTAsstMap: Record<string, string> = {};
    tempDay = dayjs(start);
    let ptIdx=0, asstIdx=0;
    for(const {date} of morningDays) {
      // PT
      while(ptIdx<ptPersonnel.length && !ptPersonnel[ptIdx].active) ptIdx++;
      morningPTMap[date] = ptPersonnel[ptIdx%ptPersonnel.length].id;
      ptIdx++;
      // PT_ASST
      while(asstIdx<ptAssistantPersonnel.length && !ptAssistantPersonnel[asstIdx].active) asstIdx++;
      morningPTAsstMap[date] = ptAssistantPersonnel[asstIdx%ptAssistantPersonnel.length].id;
      asstIdx++;
    }
    
    while (current.isBefore(endDate) || current.isSame(endDate)) {
      const dateStr = current.format('YYYY-MM-DD');
      const dayType = getDayType(dateStr, holidays);
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
      if (dayType === 'sunday') {
        current = current.add(1, 'day');
        continue;
      }
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô
      const shiftTime = config[`${dayType}_shift`];
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô
      let requiredPT = 0;
      let requiredPTAsst = 0;
      
      if (dayType === 'weekday') {
        requiredPT = config.formats.weekday[0].PT;
        requiredPTAsst = config.formats.weekday[0].PT_ASST;
      } else if (dayType === 'weekend') {
        requiredPT = config.formats.weekend[0].PT;
        requiredPTAsst = config.formats.weekend[0].PT_ASST;
      } else if (dayType === 'holiday') {
        requiredPT = config.formats.holiday[0].PT;
        requiredPTAsst = config.formats.holiday[0].PT_ASST;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const daySchedule: DaySchedule = {
        date: dateStr,
        shift: shiftTime,
        day_type: dayType,
        slots: [],
        is_complete: false,
        total_required: requiredPT + requiredPTAsst,
        warnings: []
      };
      
      // ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const dayRequests = requests.filter(r => r.date === dateStr);
      
      // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      const wantRequests = dayRequests.filter(r => r.request_type === 'want' || r.type === 'preferred');
      const declineRequests = dayRequests.filter(r => 
        r.request_type === 'decline' || 
        r.request_type === 'leave' || 
        r.type === 'avoided' || 
        r.type === 'leave'
      );
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏´‡∏¢‡∏∏‡∏î)
      const availablePT = ptPersonnel.filter(p => 
        !declineRequests.some(r => (r.user_id === p.id) || (r.userId === p.id))
      );
      
      const availablePTAsst = ptAssistantPersonnel.filter(p => 
        !declineRequests.some(r => (r.user_id === p.id) || (r.userId === p.id))
      );
      
      // ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£‡∏Å‡πà‡∏≠‡∏ô
      // 1. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ PT ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£
      const ptWantRequests = wantRequests.filter(r => 
        ptPersonnel.some(p => (p.id === r.user_id) || (p.id === r.userId))
      );
      
      const assignedPTIds: string[] = [];
      
      for (let i = 0; i < Math.min(requiredPT, ptWantRequests.length); i++) {
        const request = ptWantRequests[i];
        const person = ptPersonnel.find(p => (p.id === request.user_id) || (p.id === request.userId));
        
        if (person) {
          daySchedule.slots.push({
            user_id: person.id,
            role: 'PT',
            assigned_by: 'request',
            confidence_score: 100
          });
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ
          shiftCounts[person.id] = (shiftCounts[person.id] || 0) + 1;
          assignedPTIds.push(person.id);
          
          // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
          ptQueue = ptQueue.filter(p => p.id !== person.id);
          ptQueue.push(person);
        }
      }
      
      // 2. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ PT_ASST ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡πÄ‡∏ß‡∏£
      const ptAsstWantRequests = wantRequests.filter(r => 
        ptAssistantPersonnel.some(p => (p.id === r.user_id) || (p.id === r.userId))
      );
      
      const assignedPTAsstIds: string[] = [];
      
      for (let i = 0; i < Math.min(requiredPTAsst, ptAsstWantRequests.length); i++) {
        const request = ptAsstWantRequests[i];
        const person = ptAssistantPersonnel.find(p => (p.id === request.user_id) || (p.id === request.userId));
        
        if (person) {
          daySchedule.slots.push({
            user_id: person.id,
            role: 'PT_ASST',
            assigned_by: 'request',
            confidence_score: 100
          });
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ
          shiftCounts[person.id] = (shiftCounts[person.id] || 0) + 1;
          assignedPTAsstIds.push(person.id);
          
          // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
          ptAsstQueue = ptAsstQueue.filter(p => p.id !== person.id);
          ptAsstQueue.push(person);
        }
      }
      
      // 3. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ PT ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô
      const ptNeeded = requiredPT - assignedPTIds.length;
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
      const availablePTQueue = ptQueue.filter(p => 
        availablePT.some(ap => ap.id === p.id) && 
        !assignedPTIds.includes(p.id)
      );
      
      for (let i = 0; i < Math.min(ptNeeded, availablePTQueue.length); i++) {
        const person = availablePTQueue[i];
        
        daySchedule.slots.push({
          user_id: person.id,
          role: 'PT',
          assigned_by: 'auto',
          confidence_score: 90
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ
        shiftCounts[person.id] = (shiftCounts[person.id] || 0) + 1;
        
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        ptQueue = ptQueue.filter(p => p.id !== person.id);
        ptQueue.push(person);
      }
      
      // 4. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ PT_ASST ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô
      const ptAsstNeeded = requiredPTAsst - assignedPTAsstIds.length;
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
      const availablePTAsstQueue = ptAsstQueue.filter(p => 
        availablePTAsst.some(ap => ap.id === p.id) && 
        !assignedPTAsstIds.includes(p.id)
      );
      
      for (let i = 0; i < Math.min(ptAsstNeeded, availablePTAsstQueue.length); i++) {
        const person = availablePTAsstQueue[i];
        
          daySchedule.slots.push({
            user_id: person.id,
          role: 'PT_ASST',
          assigned_by: 'auto',
          confidence_score: 90
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ
        shiftCounts[person.id] = (shiftCounts[person.id] || 0) + 1;
        
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        ptAsstQueue = ptAsstQueue.filter(p => p.id !== person.id);
        ptAsstQueue.push(person);
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      daySchedule.is_complete = daySchedule.slots.length === daySchedule.total_required;
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
      if (!daySchedule.is_complete) {
        const ptCount = daySchedule.slots.filter(s => s.role === 'PT').length;
        const ptAsstCount = daySchedule.slots.filter(s => s.role === 'PT_ASST').length;
        
        if (ptCount < requiredPT) {
          daySchedule.warnings?.push(`‡∏Ç‡∏≤‡∏î‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î ${requiredPT - ptCount} ‡∏Ñ‡∏ô`);
        }
        
        if (ptAsstCount < requiredPTAsst) {
          daySchedule.warnings?.push(`‡∏Ç‡∏≤‡∏î‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î ${requiredPTAsst - ptAsstCount} ‡∏Ñ‡∏ô`);
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      result.push(daySchedule);
      
      // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      current = current.add(1, 'day');
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å 7 ‡∏ß‡∏±‡∏ô
      if (result.length % 7 === 0) {
        console.log(`üîÑ ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${result.length} ‡∏ß‡∏±‡∏ô`);
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô:');
    
    // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    console.log('‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î (PT):');
    ptPersonnel.forEach(person => {
      console.log(`- ${person.name}: ${shiftCounts[person.id] || 0} ‡πÄ‡∏ß‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô: ${previousMonthCounts[person.id] || 0} ‡πÄ‡∏ß‡∏£)`);
    });
    
    console.log('‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î (PT_ASST):');
    ptAssistantPersonnel.forEach(person => {
      console.log(`- ${person.name}: ${shiftCounts[person.id] || 0} ‡πÄ‡∏ß‡∏£ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô: ${previousMonthCounts[person.id] || 0} ‡πÄ‡∏ß‡∏£)`);
    });
    
    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
    const completeCount = result.filter(d => d.is_complete).length;
    console.log(`‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${completeCount}/${result.length} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Ñ‡∏£‡∏ö`);
    
    return result;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£:', error);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÑ‡∏î‡πâ: ${error.message}`);
  }
}

// üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export async function saveShiftSchedule(schedule: DaySchedule[]): Promise<void> {
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏Ñ‡πà‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  if (USE_SIMULATION_MODE) {
    console.log('‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', schedule.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    return Promise.resolve();
  }

  if (!schedule || schedule.length === 0) {
    console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
    return;
  }

  try {
    // 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const startDate = schedule[0].date;
    const endDate = schedule[schedule.length - 1].date;

    const { error: deleteError } = await supabase
      .from('shift_schedules')
      .delete()
      .gte('date', startDate)
      .lte('date', endDate);

    if (deleteError) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤:', deleteError);
      throw deleteError;
    }

    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏´‡∏•‡∏±‡∏Å (shift_schedules) ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á id ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    const scheduleData = schedule.map(day => ({
      date: day.date,
      shift: day.shift,
      day_type: day.day_type,
      is_complete: day.is_complete,
      total_required: day.total_required
    }));

    const { data: savedSchedules, error: scheduleError } = await supabase
      .from('shift_schedules')
      .insert(scheduleData) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å upsert ‡πÄ‡∏õ‡πá‡∏ô insert
      .select('id, date'); // ‡∏Ç‡∏≠ id ‡πÅ‡∏•‡∏∞ date ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      
    if (scheduleError) throw scheduleError;

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà date ‡∏Å‡∏±‡∏ö schedule_id
    const dateToScheduleIdMap = new Map<string, string>();
    savedSchedules.forEach(s => {
      dateToScheduleIdMap.set(s.date, s.id);
    });

    // 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö shift_slots ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ schedule_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const slotData = schedule.flatMap(day => {
      const scheduleId = dateToScheduleIdMap.get(day.date);
      if (!scheduleId) return []; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö scheduleId
      
      return day.slots.map(slot => ({
        schedule_id: scheduleId,
        user_id: slot.user_id,
        role: slot.role,
        assigned_by: slot.assigned_by,
        confidence_score: slot.confidence_score
      }));
    });
    
    // 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô shift_slots (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏≥‡∏ú‡πà‡∏≤‡∏ô cascade delete)
    if (slotData.length > 0) {
    const { error: slotsError } = await supabase
      .from('shift_slots')
        .insert(slotData);
      
    if (slotsError) throw slotsError;
    }
    
    console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£ ${schedule.length} ‡∏ß‡∏±‡∏ô / ${slotData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£:', error);
    throw error;
  }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
export function analyzeShiftBalance(schedule: DaySchedule[], personnel: Personnel[]): any {
  const analysis: any = {
    fairness_score: 0,
    distribution: {},
    warnings: [],
    recommendations: []
  };
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  const counts: Record<string, number> = {};
  for (const person of personnel) {
    counts[person.id] = 0;
  }
  
  for (const day of schedule) {
    for (const slot of day.slots) {
      counts[slot.user_id]++;
    }
  }
  
  const shiftCounts = Object.values(counts);
  const avgShifts = shiftCounts.reduce((a, b) => a + b, 0) / shiftCounts.length;
  const maxShifts = Math.max(...shiftCounts);
  const minShifts = Math.min(...shiftCounts);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° (100 = ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
  analysis.fairness_score = Math.max(0, 100 - ((maxShifts - minShifts) / avgShifts * 100));
  
  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ß‡∏£
  analysis.distribution = Object.entries(counts).map(([id, count]) => ({
    person: personnel.find(p => p.id === id)?.name || id,
    shifts: count,
    deviation: count - avgShifts
  }));
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  if (analysis.fairness_score < 80) {
    analysis.recommendations.push('‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô');
  }
  
  return analysis;
}

// üìå Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export {
  getShiftConfig,
  getPersonnel,
  getShiftRequests,
  getDayType
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ShiftConfig
export function createConfigFromFormValues(formValues: {
  weekday_pt_count?: number;
  weekday_pt_asst_count?: number;
  weekday_shift?: '‡πÄ‡∏ä‡πâ‡∏≤' | '‡∏ö‡πà‡∏≤‡∏¢' | 'morning' | 'afternoon';
  weekend_pt_count?: number;
  weekend_pt_asst_count?: number;
  weekend_shift?: '‡πÄ‡∏ä‡πâ‡∏≤' | '‡∏ö‡πà‡∏≤‡∏¢' | 'morning' | 'afternoon';
  holiday_pt_count?: number;
  holiday_pt_asst_count?: number;
  holiday_shift?: '‡πÄ‡∏ä‡πâ‡∏≤' | '‡∏ö‡πà‡∏≤‡∏¢' | 'morning' | 'afternoon';
}): Partial<ShiftConfig> {
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
  const translateShift = (shift?: string): 'morning' | 'afternoon' => {
    if (!shift) return 'morning';
    if (shift === '‡πÄ‡∏ä‡πâ‡∏≤') return 'morning';
    if (shift === '‡∏ö‡πà‡∏≤‡∏¢') return 'afternoon';
    return shift as 'morning' | 'afternoon';
  };

  const config: Partial<ShiftConfig> = {
    formats: {
      weekday: [{
        PT: formValues.weekday_pt_count || 2,
        PT_ASST: formValues.weekday_pt_asst_count || 1
      }],
      weekend: [{
        PT: formValues.weekend_pt_count || 1,
        PT_ASST: formValues.weekend_pt_asst_count || 1
      }],
      holiday: [{
        PT: formValues.holiday_pt_count || 1,
        PT_ASST: formValues.holiday_pt_asst_count || 1
      }]
    },
    weekday_shift: translateShift(formValues.weekday_shift),
    weekend_shift: translateShift(formValues.weekend_shift),
    holiday_shift: translateShift(formValues.holiday_shift)
  };

  console.log('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°:', config);
  return config;
}

export async function checkTableAccess() {
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  if (USE_SIMULATION_MODE) {
    return true;
  }

  const tables = ['shift_config', 'holidays', 'personnel', 'shift_requests'];
  const results: { table: string; accessible: boolean; error?: string }[] = [];

  for (const table of tables) {
    // ‡πÉ‡∏ä‡πâ select('*') ‡πÅ‡∏ó‡∏ô select('id') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const { error } = await supabase.from(table).select('*').limit(1);
    if (error) {
      results.push({ table, accessible: false, error: error.message });
    } else {
      results.push({ table, accessible: true });
    }
  }

  const inaccessibleTables = results.filter(r => !r.accessible);

  if (inaccessibleTables.length > 0) {
    const errorDetails = inaccessibleTables.map(t => `${t.table} (‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${t.error})`).join(', ');
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ${errorDetails}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS policies ‡πÉ‡∏ô Supabase.`);
  }

  return true;
} 